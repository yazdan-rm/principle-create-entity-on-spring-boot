if we have do not determine role for endpint like this
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .csrf()
                .disable()
//                .cors()
//                .and()
//                .addFilterBefore(corsFilter(), UsernamePasswordAuthenticationFilter.class)
                .headers()
                .contentSecurityPolicy(contentSecurityPolicy)
                .and()
                .referrerPolicy(ReferrerPolicyHeaderWriter.ReferrerPolicy.STRICT_ORIGIN_WHEN_CROSS_ORIGIN)
                .and()
                .frameOptions()
                .sameOrigin()
                .and()
                .sessionManagement()
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and()
                .authorizeHttpRequests()
                .antMatchers(HttpMethod.OPTIONS,"/**/**/**").permitAll()
                .antMatchers("/api/**/**","/auth/account")//,"/cameras/*","/criminals/*","/foundeds/*","/images/*","/logs/*","/persons/*","/statistics/*","/nodes/*","/stations/*")
                .authenticated()
//                .authenticated()
//                .hasAnyRole("USER")
                .antMatchers("/auth/login").permitAll().and()
                .oauth2Login()
                .and()
                .httpBasic()
                .and()
                .logout()
//                .addLogoutHandler(keycloakLogoutHandler)
                .logoutSuccessUrl("/")
                .and()
                .oauth2ResourceServer()
                .jwt()
                .jwtAuthenticationConverter(jwtAuthenticationConverter())
                .jwkSetUri(jwkUri);
        return http.getOrBuild();
    }    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .csrf()
                .disable()
//                .cors()
//                .and()
//                .addFilterBefore(corsFilter(), UsernamePasswordAuthenticationFilter.class)
                .headers()
                .contentSecurityPolicy(contentSecurityPolicy)
                .and()
                .referrerPolicy(ReferrerPolicyHeaderWriter.ReferrerPolicy.STRICT_ORIGIN_WHEN_CROSS_ORIGIN)
                .and()
                .frameOptions()
                .sameOrigin()
                .and()
                .sessionManagement()
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and()
                .authorizeHttpRequests()
                .antMatchers(HttpMethod.OPTIONS,"/**/**/**").permitAll()
                .antMatchers("/api/**/**","/auth/account")//,"/cameras/*","/criminals/*","/foundeds/*","/images/*","/logs/*","/persons/*","/statistics/*","/nodes/*","/stations/*")
                .authenticated()
//                .authenticated()
//                .hasAnyRole("USER")
                .antMatchers("/auth/login").permitAll().and()
                .oauth2Login()
                .and()
                .httpBasic()
                .and()
                .logout()
//                .addLogoutHandler(keycloakLogoutHandler)
                .logoutSuccessUrl("/")
                .and()
                .oauth2ResourceServer()
                .jwt()
                .jwtAuthenticationConverter(jwtAuthenticationConverter())
                .jwkSetUri(jwkUri);
        return http.getOrBuild();
    }
how treat spring sec with this
